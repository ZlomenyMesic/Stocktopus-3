//
// Stocktopus 3 chess engine
//      by ZlomenyMesic 
//

namespace Stocktopus_3 {
    enum Color {
        White = 0,
        Black = 1,
        None = 2
    }

    enum PieceType {
        None = 0,
        Pawn = 1,
        Knight = 2,
        Bishop = 3,
        Rook = 4,
        Queen = 5,
        King = 6
    }

    internal static class Constants {
        internal const string ENGINE_INFO = "id name Stocktopus-3\nid author ZlomenyMesic\nuciok";
        internal const string STARTPOS_FEN = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
        internal const string FILES = "abcdefgh";
        internal const string PIECES = "pnbrqk";

        internal const ulong OO_WHITE_MASK = 0x6000000000000000;
        internal const ulong OOO_WHITE_MASK = 0x0E00000000000000;
        internal const ulong OO_BLACK_MASK = 0x0000000000000060;
        internal const ulong OOO_BLACK_MASK = 0x000000000000000E;

        internal static int[] pieceValues = new int[] { 1, 3, 3, 5, 9, 0 };

        internal const ulong DeBrujinValue = 0x07EDD5E59A4E28C2;

        internal static readonly int[] DeBrujinTable =
        {
            63,  0, 58,  1, 59, 47, 53,  2,
            60, 39, 48, 27, 54, 33, 42,  3,
            61, 51, 37, 40, 49, 18, 28, 20,
            55, 30, 34, 11, 43, 14, 22,  4,
            62, 57, 46, 52, 38, 26, 32, 41,
            50, 36, 17, 19, 29, 10, 13, 21,
            56, 45, 25, 31, 35, 16,  9, 12,
            44, 24, 15,  8, 23,  7,  6,  5
        };

        internal static readonly ulong[] SixBitRankMask = new ulong[]{
            0x000000000000007E, 0x0000000000007E00, 0x00000000007E0000,
            0x000000007E000000, 0x0000007E00000000, 0x00007E0000000000,
            0x007E000000000000, 0x7E00000000000000
        };

        internal static readonly ulong[] SixBitFileMask = new ulong[]{
            0x0001010101010100, 0x0002020202020200, 0x0004040404040400,
            0x0008080808080800, 0x0010101010101000, 0x0020202020202000,
            0x0040404040404000, 0x0080808080808000
        };

        internal static readonly ulong[] FileMagic = new ulong[]{
            0x8040201008040200, 0x4020100804020100, 0x2010080402010080, 0x1008040201008040,
            0x0804020100804020, 0x0402010080402010, 0x0201008040201008, 0x0100804020100804
        };

        internal static readonly ulong[] A1H8DiagonalMagic = new ulong[]{
            0x0000000000000000, 0x0000000000000000, 0x0808080000000000, 0x1010101000000000,
            0x2020202020000000, 0x4040404040400000, 0x8080808080808000, 0x0101010101010100,
            0x0101010101010100, 0x0101010101010100, 0x0101010101010100, 0x0101010101010100,
            0x0101010101010100, 0x0000000000000000, 0x0000000000000000
        };

        internal static readonly ulong[] H1A8DiagonalMagic = new ulong[]{
            0x0000000000000000, 0x0000000000000000, 0x0101010101010100, 0x0101010101010100,
            0x0101010101010100, 0x0101010101010100, 0x0101010101010100, 0x0101010101010100,
            0x0080808080808080, 0x0040404040404040, 0x0020202020202020, 0x0010101010101010,
            0x0008080808080808, 0x0000000000000000, 0x0000000000000000
        };

        internal static readonly ulong[] A1H8DiagonalMask = new ulong[]{
            0x0000000000000080, 0x0000000000008040, 0x0000000000804020, 0x0000000080402010,
            0x0000008040201008, 0x0000804020100804, 0x0080402010080402, 0x8040201008040201,
            0x4020100804020100, 0x2010080402010000, 0x1008040201000000, 0x0804020100000000,
            0x0402010000000000, 0x0201000000000000, 0x0100000000000000
        };

        internal static readonly ulong[] H1A8DiagonalMask = new ulong[]{
            0x0000000000000001, 0x0000000000000102, 0x0000000000010204, 0x0000000001020408,
            0x0000000102040810, 0x0000010204081020, 0x0001020408102040, 0x0102040810204080,
            0x0204081020408000, 0x0408102040800000, 0x0810204080000000, 0x1020408000000000,
            0x2040800000000000, 0x4080000000000000, 0x8000000000000000
        };

        internal static ulong[] SquareMask = new ulong[] {
            0x0000000000000001,
            0x0000000000000002,
            0x0000000000000004,
            0x0000000000000008,
            0x0000000000000010,
            0x0000000000000020,
            0x0000000000000040,
            0x0000000000000080,

            0x0000000000000100,
            0x0000000000000200,
            0x0000000000000400,
            0x0000000000000800,
            0x0000000000001000,
            0x0000000000002000,
            0x0000000000004000,
            0x0000000000008000,

            0x0000000000010000,
            0x0000000000020000,
            0x0000000000040000,
            0x0000000000080000,
            0x0000000000100000,
            0x0000000000200000,
            0x0000000000400000,
            0x0000000000800000,

            0x0000000001000000,
            0x0000000002000000,
            0x0000000004000000,
            0x0000000008000000,
            0x0000000010000000,
            0x0000000020000000,
            0x0000000040000000,
            0x0000000080000000,

            0x0000000100000000,
            0x0000000200000000,
            0x0000000400000000,
            0x0000000800000000,
            0x0000001000000000,
            0x0000002000000000,
            0x0000004000000000,
            0x0000008000000000,

            0x0000010000000000,
            0x0000020000000000,
            0x0000040000000000,
            0x0000080000000000,
            0x0000100000000000,
            0x0000200000000000,
            0x0000400000000000,
            0x0000800000000000,

            0x0001000000000000,
            0x0002000000000000,
            0x0004000000000000,
            0x0008000000000000,
            0x0010000000000000,
            0x0020000000000000,
            0x0040000000000000,
            0x0080000000000000,

            0x0100000000000000,
            0x0200000000000000,
            0x0400000000000000,
            0x0800000000000000,
            0x1000000000000000,
            0x2000000000000000,
            0x4000000000000000,
            0x8000000000000000
        };

        internal static readonly short[] MidgameTables = new short[6 * 64]
        { //PAWN MG
          100,  100,  100,  100,  100,  100,  100,  100,
          120,  120,  115,  100,  100,  115,  120,  120,
          105,  100,  115,  120,  120,  115,  100,  105,
          90,   95,   105,  125,  125,  105,  95,   90,
          90,   90,   95,   105,  105,  95,   90,   90,
          90,   90,   90,   95,   95,   90,   90,   90,
          90,   90,   90,   90,   90,   95,   90,   90,
          100,  100,  100,  100,  100,  100,  100,  100,
          //KNIGHT MG
          275,  280,  280,  285,  285,  280,  280,  275,
          290,  295,  305,  315,  315,  305,  295,  290,
          295,  310,  325,  315,  315,  325,  310,  295,
          295,  305,  325,  310,  310,  325,  305,  295,
          295,  300,  300,  300,  300,  300,  300,  295,
          295,  295,  295,  295,  295,  295,  295,  295,
          285,  295,  295,  295,  295,  295,  295,  285,
          275,  285,  295,  295,  295,  295,  285,  275,
          //BISHOP MG
          295,  295,  295,  300,  300,  295,  295,  295,
          310,  340,  325,  330,  330,  325,  340,  310,
          320,  330,  330,  335,  335,  330,  330,  320,
          330,  330,  335,  330,  330,  335,  330,  330,
          325,  335,  325,  330,  330,  325,  335,  325,
          315,  315,  315,  315,  315,  315,  315,  315,
          305,  305,  305,  305,  305,  305,  305,  305,
          305,  305,  305,  305,  305,  305,  305,  305,
          //ROOK MG
          490,  495,  525,  515,  515,  525,  495,  490,
          495,  495,  525,  535,  535,  525,  495,  495,
          485,  510,  505,  510,  510,  505,  510,  485,
          485,  475,  475,  495,  495,  475,  475,  485,
          480,  475,  470,  475,  475,  470,  475,  480,
          475,  475,  480,  480,  480,  480,  475,  475,
          485,  485,  485,  480,  480,  485,  485,  485,
          500,  495,  490,  495,  495,  490,  495,  500,
          //QUEEN MG
          895,  900,  920,  955,  955,  920,  900,  895,
          910,  905,  915,  945,  945,  915,  905,  910,
          920,  925,  910,  920,  920,  910,  925,  920,
          915,  905,  905,  910,  910,  905,  905,  915,
          905,  900,  900,  905,  905,  900,  900,  905,
          920,  925,  910,  900,  900,  910,  925,  920,
          905,  910,  915,  915,  915,  915,  910,  905,
          905,  900,  910,  915,  915,  910,  900,  905,
          //KING MG
           25,   70,   55,   15,   15,   55,   70,   25,
           0,    5,    0,   -15,  -15,   0,    5,    0,
          -10,  -5,   -15,  -25,  -25,  -15,  -5,   -10,
          -30,  -25,  -30,  -35,  -35,  -30,  -25,  -30,
          -45,  -30,  -45,  -60,  -60,  -45,  -30,  -45,
          -25,  -25,  -60,  -75,  -75,  -60,  -25,  -25,
          -15,  -20,  -25,  -70,  -70,  -25,  -20,  -15,
          -5,   -15,  -20,  -35,  -35,  -20,  -15,   -5,
        };

        internal static readonly short[] EndgameTables = new short[6 * 64]
        { //PAWN EG
          100,  100,  100,  100,  100,  100,  100,  100,
          75,   75,   75,   70,   70,   75,   75,   75,
          85,   85,   80,   75,   75,   80,   85,   85,
          105,  105,  105,  100,  100,  105,  105,  105,
          120,  120,  115,  115,  115,  115,  120,  120,
          165,  155,  145,  135,  135,  145,  155,  165,
          205,  200,  195,  195,  195,  195,  200,  205,
          100,  100,  100,  100,  100,  100,  100,  100,
          //KNIGHT EG
          230,  230,  235,  240,  240,  235,  230,  230,
          230,  240,  245,  245,  245,  245,  240,  230,
          235,  245,  255,  260,  260,  255,  245,  235,
          240,  270,  280,  285,  285,  280,  270,  240,
          245,  270,  280,  285,  285,  280,  270,  245,
          245,  255,  265,  270,  270,  265,  255,  245,
          245,  250,  250,  255,  255,  250,  250,  245,
          245,  245,  250,  245,  245,  250,  245,  245,
          //BISHOP EG
          280,  280,  285,  290,  290,  285,  280,  280,
          280,  285,  290,  295,  295,  290,  285,  280,
          290,  285,  285,  290,  290,  285,  285,  290,
          280,  285,  290,  295,  295,  290,  285,  280,
          280,  285,  295,  300,  300,  295,  285,  280,
          280,  285,  285,  295,  295,  285,  285,  280,
          285,  280,  285,  290,  290,  285,  280,  285,
          280,  280,  285,  290,  290,  285,  280,  280,
          //ROOK EG
          505,  510,  510,  505,  505,  510,  510,  505,
          505,  510,  515,  510,  510,  515,  510,  505,
          510,  515,  510,  505,  505,  510,  515,  510,
          505,  510,  505,  500,  500,  505,  510,  505,
          505,  510,  505,  500,  500,  505,  510,  505,
          510,  515,  510,  505,  505,  510,  515,  510,
          505,  510,  515,  510,  510,  515,  510,  505,
          505,  510,  510,  505,  505,  510,  510,  505,
          //QUEEN EG
          910,  910,  910,  910,  910,  910,  910,  910,
          910,  915,  915,  915,  915,  915,  915,  910,
          910,  915,  920,  925,  925,  920,  915,  910,
          910,  915,  925,  935,  935,  925,  915,  910,
          910,  915,  925,  935,  935,  925,  915,  910,
          910,  915,  920,  925,  925,  920,  915,  910,
          910,  915,  915,  915,  915,  915,  915,  910,
          910,  910,  910,  910,  910,  910,  910,  910,
          //KING EG
          -70,  -35,  -20,  -10,  -10,  -20,  -35,  -70,
          -35,  -20,  -10,   0,    0,   -10,  -20,  -35,
          -20,  -10,   0,    5,    5,    0,   -10,  -20,
          -10,   0,    5,    25,   25,   5,    0,   -10,
          -10,  -0,    5,    25,   25,   5,    0,   -10,
          -20,  -10,   0,    5,    5,    0,   -10,  -20,
          -35,  -20,  -10,   0,    0,   -10,  -20,  -35,
          -70,  -35,  -20,  -10,  -10,  -20,  -35,  -70,
        };
    }
}
